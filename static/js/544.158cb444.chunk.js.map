{"version":3,"file":"static/js/544.158cb444.chunk.js","mappings":"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","sources":["pages/Home/Home.jsx","services/api.js","helpers/getGenres.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { getTrendingFilms } from 'services/api';\nimport { routes } from 'helpers/routes';\nimport { Loader } from 'components/index';\n\nconst HomePage = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n\n  useEffect(() => {\n    async function getFilms() {\n      try {\n        setIsLoading(true);\n\n        const { results } = await getTrendingFilms();\n        setTrendingMovies(results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getFilms();\n  }, []);\n\n  return (\n    <>\n      {error && <div>Try to reload the page</div>}\n      {isLoading && <Loader />}\n      <ul>\n        {trendingMovies.map(({ id, title }) => (\n          <li key={id}>\n            <Link state={{ from: location }} to={routes.MOVIE_DETAILS_PATH(id)}>\n              <h3>{title}</h3>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default HomePage;\n","import axios from 'axios';\nimport defaultPhoto from '../img/default-photo.jpeg';\nimport { getGenres } from 'helpers/getGenres';\n\nconst API_KEY = '7075a5d5708cc9d9db094f2ee386024f';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingFilms = async () => {\n  const params = {\n    api_key: API_KEY,\n  };\n  const { data } = await axios.get('/trending/movie/week', { params });\n  const results = data.results.map(({ id, title }) => ({ id, title }));\n  return { results };\n};\n\nexport const getFilmByQuery = async q => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n    query: q,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  const results = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return { results };\n};\n\nexport const getDetailedFilmInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n  const { data } = await axios.get(`/movie/${movieId}`, { params });\n  const {\n    id,\n    original_title,\n    genres,\n    overview,\n    poster_path,\n    release_date,\n    vote_average,\n  } = data;\n\n  return {\n    id,\n    original_title,\n    genres: genres.length ? getGenres(genres) : \"Genres aren't given\",\n    overview,\n    poster_path: poster_path\n      ? 'https://image.tmdb.org/t/p/w300' + poster_path\n      : defaultPhoto,\n    release_date: new Date(release_date).getFullYear(),\n    vote_average: Math.round(vote_average * 10),\n  };\n};\n\nexport const getCastInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/credits`, { params });\n  const array = data.cast;\n  return array;\n};\n\nexport const getReviewsInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, { params });\n\n  const array = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n\n  return array;\n};\n","export const getGenres = array => {\n  return array.map(el => el.name).join(', ');\n};\n"],"names":["useState","trendingMovies","setTrendingMovies","error","setError","isLoading","setIsLoading","location","useLocation","useEffect","getTrendingFilms","results","message","getFilms","map","id","title","state","from","to","routes","API_KEY","axios","params","api_key","data","getFilmByQuery","q","language","query","original_title","getDetailedFilmInfo","movieId","genres","overview","poster_path","release_date","vote_average","length","array","el","name","join","defaultPhoto","Date","getFullYear","Math","round","getCastInfo","cast","getReviewsInfo","author","content"],"sourceRoot":""}