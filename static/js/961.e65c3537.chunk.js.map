{"version":3,"file":"static/js/961.e65c3537.chunk.js","mappings":"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","sources":["pages/MovieDetails/MovieDetails.jsx","services/api.js","helpers/getGenres.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useLocation, useParams, Link } from 'react-router-dom';\n\nimport { getDetailedFilmInfo } from 'services/api';\nimport { routes } from 'helpers/routes';\nimport { MovieInfo, Loader } from 'components/index';\n\nconst MovieDetailsPage = () => {\n  const [detailedInfo, setDetailedInfo] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (movieId === null) return;\n\n    async function getDetailedInfo() {\n      try {\n        setIsLoading(true);\n\n        const data = await getDetailedFilmInfo(movieId);\n        setDetailedInfo(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    getDetailedInfo();\n  }, [movieId]);\n\n  return (\n    <>\n      {error && <div>Try to reload the page</div>}\n      {isLoading && <Loader />}\n      <Link to={location.state?.from ?? routes.HOME}>Go back</Link>\n      {detailedInfo && <MovieInfo detailedInfo={detailedInfo} />}\n    </>\n  );\n};\n\nexport default MovieDetailsPage;\n","import axios from 'axios';\nimport defaultPhoto from '../img/default-photo.jpeg';\nimport { getGenres } from 'helpers/getGenres';\n\nconst API_KEY = '7075a5d5708cc9d9db094f2ee386024f';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingFilms = async () => {\n  const params = {\n    api_key: API_KEY,\n  };\n  const { data } = await axios.get('/trending/movie/week', { params });\n  const results = data.results.map(({ id, title }) => ({ id, title }));\n  return { results };\n};\n\nexport const getFilmByQuery = async q => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n    query: q,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  const results = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return { results };\n};\n\nexport const getDetailedFilmInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n  const { data } = await axios.get(`/movie/${movieId}`, { params });\n  const {\n    id,\n    original_title,\n    genres,\n    overview,\n    poster_path,\n    release_date,\n    vote_average,\n  } = data;\n\n  return {\n    id,\n    original_title,\n    genres: genres.length ? getGenres(genres) : \"Genres aren't given\",\n    overview,\n    poster_path: poster_path\n      ? 'https://image.tmdb.org/t/p/w300' + poster_path\n      : defaultPhoto,\n    release_date: new Date(release_date).getFullYear(),\n    vote_average: Math.round(vote_average * 10),\n  };\n};\n\nexport const getCastInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/credits`, { params });\n  const array = data.cast;\n  return array;\n};\n\nexport const getReviewsInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, { params });\n\n  const array = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n\n  return array;\n};\n","export const getGenres = array => {\n  return array.map(el => el.name).join(', ');\n};\n"],"names":["useState","detailedInfo","setDetailedInfo","error","setError","isLoading","setIsLoading","location","useLocation","movieId","useParams","useEffect","getDetailedFilmInfo","data","message","getDetailedInfo","to","state","from","routes","API_KEY","axios","getTrendingFilms","params","api_key","results","map","id","title","getFilmByQuery","q","language","query","original_title","genres","overview","poster_path","release_date","vote_average","length","array","el","name","join","defaultPhoto","Date","getFullYear","Math","round","getCastInfo","cast","getReviewsInfo","author","content"],"sourceRoot":""}