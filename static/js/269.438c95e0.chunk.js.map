{"version":3,"file":"static/js/269.438c95e0.chunk.js","mappings":"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","sources":["pages/MovieDetails/Reviews/Reviews.jsx","services/api.js","helpers/getGenres.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviewsInfo } from 'services/api';\nimport { Loader } from 'components/index';\n\nconst Review = () => {\n  const [reviewInfo, setReviewInfo] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (movieId === null) return;\n\n    async function getApiReviewInfo() {\n      try {\n        setIsLoading(true);\n\n        const array = await getReviewsInfo(movieId);\n\n        setReviewInfo(array);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    getApiReviewInfo();\n  }, [movieId]);\n\n  return (\n    <>\n      {error && <div>Try to reload the page</div>}\n      {isLoading && <Loader />}\n      {reviewInfo && (\n        <ul>\n          {reviewInfo.map(({ id, author, content }) => (\n            <li key={id}>\n              <h3>Author: {author}</h3>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      {reviewInfo.length === 0 && (\n        <div>There aren't any reviews for this movie.</div>\n      )}\n    </>\n  );\n};\n\nexport default Review;\n","import axios from 'axios';\nimport defaultPhoto from '../img/default-photo.jpeg';\nimport { getGenres } from 'helpers/getGenres';\n\nconst API_KEY = '7075a5d5708cc9d9db094f2ee386024f';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingFilms = async () => {\n  const params = {\n    api_key: API_KEY,\n  };\n  const { data } = await axios.get('/trending/movie/week', { params });\n  const results = data.results.map(({ id, title }) => ({ id, title }));\n  return { results };\n};\n\nexport const getFilmByQuery = async q => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n    query: q,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  const results = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return { results };\n};\n\nexport const getDetailedFilmInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n  const { data } = await axios.get(`/movie/${movieId}`, { params });\n  const {\n    id,\n    original_title,\n    genres,\n    overview,\n    poster_path,\n    release_date,\n    vote_average,\n  } = data;\n\n  return {\n    id,\n    original_title,\n    genres: genres.length ? getGenres(genres) : \"Genres aren't given\",\n    overview,\n    poster_path: poster_path\n      ? 'https://image.tmdb.org/t/p/w300' + poster_path\n      : defaultPhoto,\n    release_date: new Date(release_date).getFullYear(),\n    vote_average: Math.round(vote_average * 10),\n  };\n};\n\nexport const getCastInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/credits`, { params });\n  const array = data.cast;\n  return array;\n};\n\nexport const getReviewsInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, { params });\n\n  const array = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n\n  return array;\n};\n","export const getGenres = array => {\n  return array.map(el => el.name).join(', ');\n};\n"],"names":["useState","reviewInfo","setReviewInfo","error","setError","isLoading","setIsLoading","movieId","useParams","useEffect","getReviewsInfo","array","message","getApiReviewInfo","map","id","author","content","length","API_KEY","axios","getTrendingFilms","params","api_key","data","results","title","getFilmByQuery","q","language","query","original_title","getDetailedFilmInfo","genres","overview","poster_path","release_date","vote_average","el","name","join","defaultPhoto","Date","getFullYear","Math","round","getCastInfo","cast"],"sourceRoot":""}