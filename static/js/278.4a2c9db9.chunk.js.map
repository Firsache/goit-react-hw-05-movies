{"version":3,"file":"static/js/278.4a2c9db9.chunk.js","mappings":"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","sources":["pages/Movies/Movies.jsx","services/api.js","helpers/getGenres.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\n\nimport { getFilmByQuery } from 'services/api';\nimport { routes } from 'helpers/routes';\n\nimport { Form, Loader } from 'components/index';\n\nconst MoviesPage = () => {\n  const [searchedMovies, setSearchedMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const location = useLocation();\n  const querySearched = searchParams.get('query');\n\n  useEffect(() => {\n    if (!querySearched) return;\n    async function getFilms() {\n      try {\n        setIsLoading(true);\n\n        const { results } = await getFilmByQuery(querySearched);\n        setSearchedMovies(results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getFilms();\n  }, [querySearched]);\n\n  const handleOnSubmit = value => {\n    setSearchParams({ query: value });\n  };\n\n  return (\n    <>\n      {error && <div>Try to reload the page</div>}\n      {isLoading && <Loader />}\n      <Form onSubmit={handleOnSubmit} />\n      {searchedMovies && (\n        <ul>\n          {searchedMovies.map(({ id, original_title }) => (\n            <li key={id}>\n              <Link\n                state={{ from: location }}\n                to={routes.MOVIE_DETAILS_PATH(id)}\n              >\n                <h3>{original_title}</h3>\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\nimport defaultPhoto from '../img/default-photo.jpeg';\nimport { getGenres } from 'helpers/getGenres';\n\nconst API_KEY = '7075a5d5708cc9d9db094f2ee386024f';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingFilms = async () => {\n  const params = {\n    api_key: API_KEY,\n  };\n  const { data } = await axios.get('/trending/movie/week', { params });\n  const results = data.results.map(({ id, title }) => ({ id, title }));\n  return { results };\n};\n\nexport const getFilmByQuery = async q => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n    query: q,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  const results = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return { results };\n};\n\nexport const getDetailedFilmInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n  const { data } = await axios.get(`/movie/${movieId}`, { params });\n  const {\n    id,\n    original_title,\n    genres,\n    overview,\n    poster_path,\n    release_date,\n    vote_average,\n  } = data;\n\n  return {\n    id,\n    original_title,\n    genres: genres.length ? getGenres(genres) : \"Genres aren't given\",\n    overview,\n    poster_path: poster_path\n      ? 'https://image.tmdb.org/t/p/w300' + poster_path\n      : defaultPhoto,\n    release_date: new Date(release_date).getFullYear(),\n    vote_average: Math.round(vote_average * 10),\n  };\n};\n\nexport const getCastInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/credits`, { params });\n  const array = data.cast;\n  return array;\n};\n\nexport const getReviewsInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, { params });\n\n  const array = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n\n  return array;\n};\n","export const getGenres = array => {\n  return array.map(el => el.name).join(', ');\n};\n"],"names":["useState","searchedMovies","setSearchedMovies","error","setError","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","location","useLocation","querySearched","get","useEffect","getFilmByQuery","results","message","getFilms","onSubmit","value","query","map","id","original_title","state","from","to","routes","API_KEY","axios","getTrendingFilms","params","api_key","data","title","q","language","getDetailedFilmInfo","movieId","genres","overview","poster_path","release_date","vote_average","length","array","el","name","join","defaultPhoto","Date","getFullYear","Math","round","getCastInfo","cast","getReviewsInfo","author","content"],"sourceRoot":""}