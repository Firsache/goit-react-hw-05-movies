{"version":3,"file":"static/js/544.a1d702a9.chunk.js","mappings":"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","sources":["pages/Home/Home.jsx","services/api.js","helpers/getGenres.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { useState } from 'react';\n\nimport { getTrendingFilms } from 'services/api';\n\nimport { Box, Loader, MovieList } from 'components/index';\n\nconst HomePage = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    async function getFilms() {\n      try {\n        setIsLoading(true);\n\n        const { results } = await getTrendingFilms();\n        setTrendingMovies(results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getFilms();\n  }, []);\n\n  return (\n    <>\n      {error && <div>Try to reload the page</div>}\n      {isLoading && <Loader />}\n      {trendingMovies.length > 0 && (\n        <Box m=\"0 auto\" maxWidth={1200} mt={32}>\n          <MovieList array={trendingMovies} />\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default HomePage;\n","import axios from 'axios';\nimport defaultPhoto from 'img/default-photo.jpeg';\nimport defaultActor from 'img/defaultPerson.jpeg';\nimport { getGenres } from 'helpers/getGenres';\n\nconst API_KEY = '7075a5d5708cc9d9db094f2ee386024f';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingFilms = async () => {\n  const params = {\n    api_key: API_KEY,\n  };\n  const { data } = await axios.get('/trending/movie/week', { params });\n  const results = data.results.map(({ id, title }) => ({ id, title }));\n  return { results };\n};\n\nexport const getFilmByQuery = async q => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n    query: q,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  const results = data.results.map(({ id, original_title }) => ({\n    id,\n    title: original_title,\n  }));\n  return { results };\n};\n\nexport const getDetailedFilmInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n  const { data } = await axios.get(`/movie/${movieId}`, { params });\n  const {\n    id,\n    original_title,\n    genres,\n    overview,\n    poster_path,\n    release_date,\n    vote_average,\n  } = data;\n\n  return {\n    id,\n    original_title,\n    genres: genres.length ? getGenres(genres) : \"Genres aren't given\",\n    overview,\n    poster_path: poster_path\n      ? 'https://image.tmdb.org/t/p/w300' + poster_path\n      : defaultPhoto,\n    release_date: new Date(release_date).getFullYear(),\n    vote_average: Math.round(vote_average * 10),\n  };\n};\n\nexport const getCastInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/credits`, { params });\n\n  const array = data.cast.map(\n    ({ id, original_name, profile_path, character }) => ({\n      id,\n      original_name,\n      profile_path: profile_path\n        ? 'https://image.tmdb.org/t/p/w300' + profile_path\n        : defaultActor,\n      character,\n    })\n  );\n  return array;\n};\n\nexport const getReviewsInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, { params });\n\n  const array = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n\n  return array;\n};\n","export const getGenres = array => {\n  return array.map(el => el.name).join(', ');\n};\n"],"names":["useState","trendingMovies","setTrendingMovies","error","setError","isLoading","setIsLoading","useEffect","getTrendingFilms","results","message","getFilms","length","m","maxWidth","mt","array","API_KEY","axios","params","api_key","data","map","id","title","getFilmByQuery","q","language","query","original_title","getDetailedFilmInfo","movieId","genres","overview","poster_path","release_date","vote_average","el","name","join","defaultPhoto","Date","getFullYear","Math","round","getCastInfo","cast","original_name","profile_path","character","defaultActor","getReviewsInfo","author","content"],"sourceRoot":""}