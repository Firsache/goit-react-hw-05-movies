{"version":3,"file":"static/js/254.ba65061a.chunk.js","mappings":"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","sources":["pages/MovieDetails/Cast/Cast.jsx","services/api.js","helpers/getGenres.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCastInfo } from 'services/api';\nimport { Loader } from 'components/index';\nimport defaultActor from 'img/defaultPerson.jpeg';\n\nconst Cast = () => {\n  const [castInfo, setCastInfo] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (movieId === null) return;\n\n    async function getApiCastInfo() {\n      try {\n        setIsLoading(true);\n\n        const array = await getCastInfo(movieId);\n\n        setCastInfo(array);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    getApiCastInfo();\n  }, [movieId]);\n\n  return (\n    <>\n      {error && <div>Try to reload the page</div>}\n      {isLoading && <Loader />}\n      {castInfo && (\n        <ul>\n          {castInfo.map(({ id, original_name, profile_path, character }) => {\n            let path = profile_path\n              ? 'https://image.tmdb.org/t/p/w300' + profile_path\n              : defaultActor;\n\n            return (\n              <li key={id}>\n                <img src={path} alt={original_name} />\n                <p>{original_name}</p>\n                <p>{character}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport defaultPhoto from '../img/default-photo.jpeg';\nimport { getGenres } from 'helpers/getGenres';\n\nconst API_KEY = '7075a5d5708cc9d9db094f2ee386024f';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingFilms = async () => {\n  const params = {\n    api_key: API_KEY,\n  };\n  const { data } = await axios.get('/trending/movie/week', { params });\n  const results = data.results.map(({ id, title }) => ({ id, title }));\n  return { results };\n};\n\nexport const getFilmByQuery = async q => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n    query: q,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  const results = data.results.map(({ id, original_title }) => ({\n    id,\n    original_title,\n  }));\n  return { results };\n};\n\nexport const getDetailedFilmInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n  const { data } = await axios.get(`/movie/${movieId}`, { params });\n  const {\n    id,\n    original_title,\n    genres,\n    overview,\n    poster_path,\n    release_date,\n    vote_average,\n  } = data;\n\n  return {\n    id,\n    original_title,\n    genres: genres.length ? getGenres(genres) : \"Genres aren't given\",\n    overview,\n    poster_path: poster_path\n      ? 'https://image.tmdb.org/t/p/w300' + poster_path\n      : defaultPhoto,\n    release_date: new Date(release_date).getFullYear(),\n    vote_average: Math.round(vote_average * 10),\n  };\n};\n\nexport const getCastInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/credits`, { params });\n  const array = data.cast;\n  return array;\n};\n\nexport const getReviewsInfo = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, { params });\n\n  const array = data.results.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n\n  return array;\n};\n","export const getGenres = array => {\n  return array.map(el => el.name).join(', ');\n};\n"],"names":["useState","castInfo","setCastInfo","error","setError","isLoading","setIsLoading","movieId","useParams","useEffect","getCastInfo","array","message","getApiCastInfo","map","id","original_name","profile_path","character","path","defaultActor","src","alt","API_KEY","axios","getTrendingFilms","params","api_key","data","results","title","getFilmByQuery","q","language","query","original_title","getDetailedFilmInfo","genres","overview","poster_path","release_date","vote_average","length","el","name","join","defaultPhoto","Date","getFullYear","Math","round","cast","getReviewsInfo","author","content"],"sourceRoot":""}